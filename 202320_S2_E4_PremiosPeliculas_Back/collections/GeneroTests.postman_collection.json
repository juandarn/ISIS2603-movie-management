{
	"info": {
		"_postman_id": "421c8d4b-7320-44e6-a947-46b73939ee20",
		"name": "Genero Tests",
		"description": "Colección de pruebas sobre el recurso Género",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29281547"
	},
	"item": [
		{
			"name": "Crear un género",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()",
							"pm.globals.set(\"genero_id\", data.id);",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"   pm.response.to.have.status(201);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"nombre\": \"drama\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/generos",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"generos"
					]
				},
				"description": "Crea un nuevo género. El recurso solo tiene de atributo \"name\" que debe ser único. El Id es inicializado por la BD y se debe ver en la respuesta.\n\nPara la prueba, se guarda el id en una variable que será utilizada en otras peticiones de la colección.\n\n**Código http esperado: 200**"
			},
			"response": []
		},
		{
			"name": "Obtener todos los generos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Number of generos > ' + 0, function () {",
							"   var data = pm.response.json()",
							"   pm.expect(data.length).to.greaterThan(0)",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"   pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/generos",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"generos"
					]
				},
				"description": "Consulta todos los géneros de películas en la aplicación.  \nLa petición no tiene cuerpo.\n\nPara la prueba, se verifica que el conjunto de autores en la respuesta tenga mas de uno.\n\n**Código http esperado: 200**"
			},
			"response": []
		},
		{
			"name": "Obtener un genero",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/generos/{{genero_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"generos",
						"{{genero_id}}"
					]
				},
				"description": "Consulta el género de una película en la aplicación.  \nLa petición no tiene cuerpo.\n\nSe envía el Id del género a consultar en la URL de la petición.\n\n**Código http esperado: 200**"
			},
			"response": []
		},
		{
			"name": "Obtener un genero que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.apierror.message).to.eql(\"Género no encontrado\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/generos/0",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"generos",
						"0"
					]
				},
				"description": "Consulta un género que no existe en la aplicación.\n\nPara la prueba se verifica que se genera el error.\n\n**Código http esperado: 404**"
			},
			"response": []
		},
		{
			"name": "Editar un genero",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"   pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"nombre\":\"fantasia\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/generos/{{genero_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"generos",
						"{{genero_id}}"
					]
				},
				"description": "Actualiza un género existente.  \nse envía el Id en la URL de la petición.\n\n**Código http esperado: 200**"
			},
			"response": []
		},
		{
			"name": "Editar un genero que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.apierror.message).to.eql(\"Género no encontrado\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"nombre\":\"Terror\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/generos/0",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"generos",
						"0"
					]
				},
				"description": "Actualiza un genero que no existe.\n\nPara la prueba se verifica que se genera el error y el mensaje \"Género no existente\".\n\n**Código HTTP esperado: 404**"
			},
			"response": []
		},
		{
			"name": "Borrar un genero",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"   pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/generos/{{genero_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"generos",
						"{{genero_id}}"
					]
				},
				"description": "Borra un género. Se envía el id del género creado anteriormente.\n\n**Código HTTP esperado: 204**"
			},
			"response": []
		},
		{
			"name": "Borrar un genero que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.apierror.message).to.eql(\"Género no encontrado\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/generos/0",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"generos",
						"0"
					]
				},
				"description": "Borra un género que no existe en la aplicación.\n\nPara la prueba se verifica que se genera el error y el mensaje \"Género no existente\".\n\n**Código http esperado: 404**"
			},
			"response": []
		}
	]
}